#ifndef HPC_GPU_MALI_CONTEXT_H_
#define HPC_GPU_MALI_CONTEXT_H_

#include <stdint.h>

#include "hpc/gpu/base_utilities.h"

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

//===-------------- BEGIN AUTOGENERATED REGION; DO NOT EDIT! --------------===//

/// Mali GPU counter layout schemes.
typedef enum hpc_gpu_mali_counter_layout_e {
  HPC_GPU_MALI_COUNTER_LAYOUT_UNKNOWN,
  HPC_GPU_MALI_COUNTER_LAYOUT_T82X,
  HPC_GPU_MALI_COUNTER_LAYOUT_T83X,
  HPC_GPU_MALI_COUNTER_LAYOUT_T86X,
  HPC_GPU_MALI_COUNTER_LAYOUT_T88X,
  HPC_GPU_MALI_COUNTER_LAYOUT_THEX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TMIX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TDVX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TSIX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TNOX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TGOX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TTRX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TNAX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TOTX,
  HPC_GPU_MALI_COUNTER_LAYOUT_TBOX
} hpc_gpu_mali_counter_layout_t;

//===--------------- END AUTOGENERATED REGION; DO NOT EDIT! ---------------===//

/// Returns the corresponding counter layout for the given GPU ID.
///
/// @param[in] gpu_id The GPU ID number reported by Mali kernel driver.
hpc_gpu_mali_counter_layout_t hpc_gpu_mali_get_counter_layout(uint16_t gpu_id);

/// Mali counter sampling context.
typedef struct hpc_gpu_mali_context_t hpc_gpu_mali_context_t;

/// Function pointer for converting a counter enum value to counter index in the
/// given layout.
typedef uint32_t (*convert_counter_fn)(uint32_t counter,
                                       hpc_gpu_mali_counter_layout_t layout);

/// Creates a context for Mali GPU counters.
///
/// @param[in]  num_counters The number of counters to sample later.
/// @param[in]  counters     The pointer to the list of counters to sample
///                          later.
/// @param[in]  allocator    The allocator used to allocate host memory for
///                          sampling counters later.
/// @param[out] out_context  The pointer to the object receiving the resultant
///                          context.
int hpc_gpu_mali_create_context(
    uint32_t num_counters, uint32_t *counters,
    convert_counter_fn convert_counter,
    const hpc_gpu_host_allocation_callbacks_t *allocator,
    hpc_gpu_mali_context_t **out_context);

/// Destroys the context for Mali GPU counters.
///
/// @param[in] context   The counter sampling context.
/// @param[in] allocator The allocator used to free allocated host memory.
int hpc_gpu_mali_destroy_context(
    hpc_gpu_mali_context_t *context,
    const hpc_gpu_host_allocation_callbacks_t *allocator);

/// Starts sampling Mali GPU counters specified when creating the context.
///
/// This zeros the registered counters in preparation for continously sampling.
///
/// @param[in] context The counter sampling context.
int hpc_gpu_mali_context_start_counters(const hpc_gpu_mali_context_t *context);

/// Stops sampling Mali GPU counters specified when creating the context.
///
/// @param[in] context The counter sampling context.
int hpc_gpu_mali_context_stop_counters(const hpc_gpu_mali_context_t *context);

/// Samples Mali GPU counters specified when creating the context.
///
/// @param[in]  context The counter sampling context.
/// @param[out] values  The pointer to the memory for receiving newly sampled
///                     values. Its element count should be greater than or
///                     equal to the number of counters specified when
///                     creating the `context`.
int hpc_gpu_mali_context_query_counters(const hpc_gpu_mali_context_t *context,
                                        uint64_t *values);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  // HPC_GPU_MALI_CONTEXT_H_
