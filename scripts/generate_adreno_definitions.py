#!/usr/bin/env python3

import argparse
import os
import re

import xml.etree.ElementTree as ET
from dataclasses import dataclass
from typing import Dict

ADRENO_ACRONYMS = ["ALU", "EFU", "GPR"]
# Namespace prefixes used in Freedreno's envytool definition
ADRENO_XML_NS = {"nouveau": "http://nouveau.freedesktop.org/"}

ADRENO_C_HEADER_TEMPLATE = """// AUTOGENERATED; DO NOT EDIT!

#ifndef HPC_GPU_ADRENO_{series}_H_
#define HPC_GPU_ADRENO_{series}_H_
{content}
#endif  // HPC_GPU_ADRENO_{series}_H_
"""

ADRENO_C_ENUM_TEMPALTE = """
typedef enum hpc_gpu_adreno_{series}_{group}_perfcounter_e {{
  {cases}
}} hpc_gpu_adreno_{series}_{group}_perfcounter_t;
"""

ADRENO_C_ENUM_CASE_TEMPALTE = "HPC_GPU_ADRENO_{series}_{group}_{symbol} = {value}"


@dataclass
class AdrenoPerfCounter:
  """A data class containing one Adreno perf counter."""
  name: str
  symbol: str
  value: int


@dataclass
class AdrenoPerSeriesDefinition:
  """A data class containing all performance counters for one Andreo series."""
  series: str
  groups: Dict[str, Dict[int, AdrenoPerfCounter]]

  def __str__(self):
    lines = [f"Series: {self.series}"]
    for group_name, group in self.groups.items():
      lines.append(f"PerfCounter Group: '{group_name}'")
      for value, case in group.items():
        lines.append(f"  {value} -> {case.symbol} ({case.name})")
    return "\n".join(lines)

  def as_c_header(self):
    enums = []
    for group_name, group in sorted(self.groups.items()):
      cases = []
      for value, case in group.items():
        cases.append(
            ADRENO_C_ENUM_CASE_TEMPALTE.format(series=self.series,
                                               group=group_name,
                                               symbol=case.symbol,
                                               value=case.value))
      enums.append(
          ADRENO_C_ENUM_TEMPALTE.format(series=self.series.lower(),
                                        group=group_name.lower(),
                                        cases=",\n  ".join(cases)))
    return ADRENO_C_HEADER_TEMPLATE.format(series=self.series,
                                           content="".join(enums))


def parse_xml_file(xml_path: str) -> AdrenoPerSeriesDefinition:
  """Parses the given XML file definining Adreno performance counters.

  The input XML file is expected to have the following structure:
  ```
  <database xmlns="http://nouveau.freedesktop.org/"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://nouveau.freedesktop.org/ rules-ng.xsd">
    <enum name="a6xx_<group>_perfcounter_select">
      <value value="0" name="PERF_<group>_<symbol>"/>
      <value value="1" name="PERF_<group>_<symbol>"/>
      ...
    </enum>
    ...
  </database>
  ```
  """
  series = os.path.splitext(os.path.basename(xml_path))[0]
  groups = {}

  tree = ET.parse(xml_path)
  root = tree.getroot()

  # First collect all perf counter groups' names and XML elements.
  acronyms = set(ADRENO_ACRONYMS)
  element_to_group_name_map = {}

  for enum in root.findall("nouveau:enum", ADRENO_XML_NS):
    enum_name = enum.get("name")
    if not enum_name.endswith("perfcounter_select"):
      continue
    if not enum_name.startswith(series):
      raise ValueError(f"enum '{enum_name}' is not for '{series}' series")

    # Get the group name from the enum name
    group_name = enum_name[len(series) + 1:-(len("perfcounter_select") + 1)]
    group_name = group_name.upper()

    acronyms.add(group_name)
    element_to_group_name_map[enum] = group_name

  for enum in root.findall("nouveau:enum", ADRENO_XML_NS):
    group_name = element_to_group_name_map.get(enum)
    group_cases = {}

    if group_name is None:
      continue

    for case in enum.findall("nouveau:value", ADRENO_XML_NS):
      value = int(case.get("value"))
      symbol = case.get("name")
      # Drop the leading "PERF_" prefix if exists
      if symbol.startswith("PERF_"):
        symbol = symbol[len("PERF_"):]
      # Drop the leading group name prefix if exists
      if symbol.startswith(f"{group_name}_"):
        symbol = symbol[len(f"{group_name}_"):]
      # Get a nicer name string for this case from the symbol
      case_name = [(w if (len(w) <= 2 or w in acronyms) else w.lower())
                   for w in re.split(r"_+", symbol)]
      case_name = " ".join(case_name)
      group_cases[value] = AdrenoPerfCounter(case_name, symbol, value)

    groups[group_name] = group_cases

  return AdrenoPerSeriesDefinition(series.upper(), groups)


def parse_arguments():
  """Parses command-line options."""

  def check_file_path(path: str):
    if os.path.isfile(path):
      return path
    else:
      raise ValueError(f"{path} does not point to a file")

  parser = argparse.ArgumentParser()
  parser.add_argument(
      "--a5xx_xml",
      metavar="<adreno-xml-file>",
      type=check_file_path,
      required=True,
      help="Specify the XML file path containing Adreno A5xx definitions")
  parser.add_argument(
      "--a6xx_xml",
      metavar="<adreno-xml-file>",
      type=check_file_path,
      required=True,
      help="Specify the XML file path containing Adreno A6xx definitions")
  parser.add_argument("-o",
                      "--output",
                      metavar="<c-header-directory>",
                      required=True,
                      help="Specify the directory for generated C header files")
  args = parser.parse_args()

  return args


def main(args):
  a5xx_definition = parse_xml_file(args.a5xx_xml)
  a5xx_c_header = os.path.join(args.output,
                               a5xx_definition.series.lower() + ".h")
  with open(a5xx_c_header, "w") as f:
    f.write(a5xx_definition.as_c_header())

  a6xx_definition = parse_xml_file(args.a6xx_xml)
  a6xx_c_header = os.path.join(args.output,
                               a6xx_definition.series.lower() + ".h")
  with open(a6xx_c_header, "w") as f:
    f.write(a6xx_definition.as_c_header())


if __name__ == "__main__":
  main(parse_arguments())
